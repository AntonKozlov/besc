
opt $@ \
    -forceattrs $(: 'CheckModuleDebugify [Force set function attributes]: PASS') \
    -inferattrs $(: 'CheckModuleDebugify [Infer set function attributes]: PASS') \
    -ipsccp $(: 'CheckModuleDebugify [Interprocedural Sparse Conditional Constant Propagation]: PASS') \
    -called-value-propagation $(: 'CheckModuleDebugify [Called Value Propagation]: PASS') \
    -attributor $(: 'CheckModuleDebugify [Deduce and propagate attributes]: PASS') \
    -globalopt $(: 'CheckModuleDebugify [Global Variable Optimizer]: PASS') \
    -mem2reg $(: 'CheckFunctionDebugify [Promote Memory to Register]: PASS') \
    -deadargelim $(: 'CheckModuleDebugify [Dead Argument Elimination]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -globals-aa $(: 'CheckModuleDebugify [Globals Alias Analysis]: PASS') \
    -sroa $(: 'CheckFunctionDebugify [SROA]: PASS') \
    -early-cse-memssa $(: 'CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -libcalls-shrinkwrap $(: 'CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS') \
    -pgo-memop-opt $(: 'CheckFunctionDebugify [PGOMemOPSize]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -reassociate $(: 'CheckFunctionDebugify [Reassociate expressions]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -memcpyopt $(: 'CheckFunctionDebugify [MemCpy Optimization]: PASS') \
    -sccp $(: 'CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS') \
    -bdce $(: 'CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -adce $(: 'CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -barrier $(: 'CheckModuleDebugify [A No-Op Barrier Pass]: PASS') \
    -rpo-functionattrs $(: 'CheckModuleDebugify [Deduce function attributes in RPO]: PASS') \
    -globalopt $(: 'CheckModuleDebugify [Global Variable Optimizer]: PASS') \
    -globaldce $(: 'CheckModuleDebugify [Dead Global Elimination]: PASS') \
    -globals-aa $(: 'CheckModuleDebugify [Globals Alias Analysis]: PASS') \
    -float2int $(: 'CheckFunctionDebugify [Float to int]: PASS') \
    -lower-constant-intrinsics $(: 'CheckFunctionDebugify [Lower constant intrinsics]: PASS') \
    -loop-distribute $(: 'CheckFunctionDebugify [Loop Distribution]: PASS') \
    -loop-vectorize $(: 'CheckFunctionDebugify [Loop Vectorization]: PASS') \
    -loop-load-elim $(: 'CheckFunctionDebugify [Loop Load Elimination]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -instcombine $(: 'CheckFunctionDebugify [Combine redundant instructions]: PASS') \
    -transform-warning $(: 'CheckFunctionDebugify [Warn about non-applied transformations]: PASS') \
    -alignment-from-assumptions $(: 'CheckFunctionDebugify [Alignment from assumptions]: PASS') \
    -strip-dead-prototypes $(: 'CheckModuleDebugify [Strip Unused Function Prototypes]: PASS') \
    -instsimplify $(: 'CheckFunctionDebugify [Remove redundant instructions]: PASS') \
    -div-rem-pairs $(: 'CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS') \
    -simplifycfg $(: 'CheckFunctionDebugify [Simplify the CFG]: PASS')
